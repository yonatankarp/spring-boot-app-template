name: Linting

on:
  pull_request:
    types: [ opened, synchronize, reopened, ready_for_review ]
  pull_request_target:
    types: [ opened, synchronize, reopened, ready_for_review ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  linters:
    name: Linters
    # If the PR is coming from a fork (pull_request_target), ensure it's opened by "dependabot[bot]".
    # Otherwise, clone it normally.
    if: github.event_name != 'pull_request_target' || github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    steps:

      - name: Git Checkout
        if: ${{ github.event_name != 'pull_request_target' }}
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          fetch-depth: 0

      - name: Checkout PR
        if: ${{ github.event_name == 'pull_request_target' }}
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Check for Changes
        uses: dorny/paths-filter@v2.11.1
        id: changes
        with:
          filters: |
            source_code:
              - '**/src/**'
              - '**/Dockerfile'
              - '**/build.gradle.kts'
            docs:
              - README.md
              - 'docs/**'

      - name: Lint Documents
        if: steps.changes.outputs.docs == 'true'
        uses: avto-dev/markdown-lint@v1.5.0
        continue-on-error: true
        with:
          config: './config/markdown-lint/rules.json'
          args: '**/*.md'

      - name: PMD Static Code Analysis
        if: steps.changes.outputs.source_code == 'true'
        id: pmd
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew pmdMain pmdTest

      - name: Check Style
        if: steps.changes.outputs.source_code == 'true'
        id: spotless
        continue-on-error: true
        run: ./gradlew spotlessCheck
